---
{{- include "bjw-s.common.loader.init" . }}

{{- define "app-template.nameOverride" -}}
# Set the nameOverride based on the release name if no override has been set
{{ if not .Values.global.nameOverride }}
global:
  nameOverride: "{{ .Release.Name }}"
{{ end }}
{{- end -}}
{{- $_ := mergeOverwrite .Values (include "app-template.nameOverride" . | fromYaml) -}}

{{- define "app-template.hardcodedValues"}}
# Disable service
service:
  main:
    enabled: false

# Disable probes
probes:
  liveness:
    enabled: false
  readiness:
    enabled: false
  startup:
    enabled: false

# Disable ingress
ingress:
  main:
    enabled: false

# Populate env from secret
{{- if .Values.secrets.secretenv.enabled }}
envFrom:
  - secretRef:
      name: {{ include "bjw-s.common.lib.chart.names.fullname" . }}-secretenv
  {{- with .Values.envFrom }}
  {{- toYaml . | nindent 2 }}
  {{- end }}
{{- end }}
{{- end -}}

{{- $_ := mergeOverwrite .Values (include "app-template.hardcodedValues" . | fromYaml) -}}

{{/* Inject IPNS key secret volume mount */}}
{{- define "ipfs-sync.ipnsSecretVolume" -}}
enabled: "true"
mountPath: "/keys/ipns.key"
subPath: "ipns.key"
type: "custom"
volumeSpec:
  secret:
    secretName: {{ include "bjw-s.common.lib.chart.names.fullname" . }}-ipns-secret
{{- end -}}
{{- $_ := set .Values.persistence "ipns-secret" (include "ipfs-sync.ipnsSecretVolume" . | fromYaml) -}}

{{/* Render the templates */}}
{{ include "bjw-s.common.loader.generate" . }}
