image:
  repository: ipfs/kubo
  tag: v0.21.0
  pullPolicy: IfNotPresent

##
## Application
##
initContainers:
  add-key:
    name: add-key
    image: "{{ printf "%s:%s" .Values.image.repository .Values.image.tag }}"
    command:
      - sh
      - -acxe
      - >-
        if ipfs key list | grep main; then
          echo "key already exists. skipping import...";
        else
          ipfs --api "$IPFS_API" key import main /keys/ipns.key;
        fi
    env:
      IPFS_API: "{{ .Values.env.IPFS_API }}"
    volumeMounts:
      - name: ipns-secret
        mountPath: /keys/ipns.key
        subPath: ipns.key
command:
  - sh
  - -acxe
  - >-
    rootHash=$(ipfs --api "$IPFS_API" files stat /contracts | head -n 1);
    echo "Publishing rootHash $rootHash under ipns key";
    ipfs --api "$IPFS_API" -D name publish --key=main $rootHash;
    echo "Published rootHash $rootHash under ipns key";
commandFull:
  - sh
  - -acxe
  - >-
    echo "Start: $(date)";
    hash=$(ipfs --api "$IPFS_API" add -Q -r /data/contracts);
    echo "End: $(date) - $hash";
    echo "Start: $(date)";
    ipfs --api "$IPFS_API" files rm -r /contracts;
    echo "End: $(date) - $hash";
    echo "Start: $(date)";
    ipfs --api "$IPFS_API" files cp -p /ipfs/$hash /contracts;
    echo "End: $(date) - $hash";
    rootHash=$(ipfs --api "$IPFS_API" files stat /contracts | head -n 1);
    echo "Publishing rootHash $rootHash under ipns key";
    ipfs --api "$IPFS_API" -D name publish --key=main $rootHash;
    echo "Published rootHash $rootHash under ipns key";

controller:
  type: cronjob
  restartPolicy: Never
  cronjob:
    concurrencyPolicy: Forbid
    schedule: "* * * * *"
    startingDeadlineSeconds: 30
    successfulJobsHistory: 1
    failedJobsHistory: 1
    backoffLimit: 3

##
## Data source
##

persistence:
  data:
    enabled: true
    type: pvc
    existingClaim: sourcify-repository-xfs
    mountPath: /data

##
## Environment configuration
##

env:
  IPFS_API: /dns4/ipfs-ipfs-main-0.ipfs-ipfs-main.sourcify.svc.cluster.local/tcp/5001

##
## Secrets
##

secrets:
  secretenv:
    enabled: false
    stringData: {}
