postgresql:
  fullnameOverride: postgresql
  image:
    registry: docker.io
    repository: bitnami/postgresql
    tag: 16.1.0-debian-11-r19
    pullPolicy: IfNotPresent
  auth:
    # admin user
    enablePostgresUser: true
    postgresPassword: "<path:/secrets/clusters/sourcify/shared/shared.enc.yaml#db_postgres_admin_password>"
    # default database to create and its user
    database: sourcify
    username: sourcify
    password: "<path:/secrets/clusters/sourcify/shared/shared.enc.yaml#db_postgres_sourcify_password>"
    # replication user
    replicationUsername: repl_user
    replicationPassword: "<path:/secrets/clusters/sourcify/shared/shared.enc.yaml#db_postgres_repl_user_password>"
  primary:
    extendedConfiguration: |
      max_connections = 1024
  resources:
    limits: {}
    requests:
      memory: 256Mi
      cpu: 250m
  persistence:
    enabled: true
    storageClass: ""
    size: 250Gi
  backup:
    enabled: true
    cronjob:
      schedule: "00 02 * * *"
      concurrencyPolicy: Forbid
      restartPolicy: OnFailure
      command:
        - /bin/bash
        - -ce
        - >-
          SECONDS=0;
          export DAYS_TO_KEEP=10;
          export BACKUPS_TO_KEEP=10;
          export BACKUP_DIR=/backup/pgdump;
          export BACKUP_FILE=$BACKUP_DIR/pg_dumpall-$(date '+%Y-%m-%d-%H-%M').pgdump;
          echo "Total backups sizes: $(du -sh $BACKUP_DIR)";
          echo "Listing all backups:";
          ls -lh $BACKUP_DIR/*.pgdump;
          echo "Creating backup: $BACKUP_FILE";
          pg_dumpall --clean --if-exists --load-via-partition-root --quote-all-identifiers --no-password --file=$BACKUP_FILE;
          duration=$SECONDS;
          echo "$((duration / 60)) minutes and $((duration % 60)) seconds elapsed.";
          echo "Deleting backups older than $DAYS_TO_KEEP days";
          find /backup/pgdump -mtime +$DAYS_TO_KEEP -type f -delete;
          echo "Only keeping the $BACKUPS_TO_KEEP most recent backups";
          cd $BACKUP_DIR;
          find . -maxdepth 1 -type f -printf '%Ts\t%P\n' | sort -n | head -n -$BACKUPS_TO_KEEP | cut -f 2- | xargs rm -rf;
      storage:
        storageClass: ""
        size: 200Gi
        mountPath: /backup/pgdump

migrations:
  enabled: true
  image:
    registry: docker.io
    repository: node
    tag: 16.17.0-bullseye
    pullPolicy: IfNotPresent
  env:
    - name: POSTGRES_USER
      value: sourcify
    - name: POSTGRES_PASSWORD
      value: "<path:/secrets/clusters/sourcify/shared/shared.enc.yaml#db_postgres_sourcify_password>"
    - name: POSTGRES_DB
      value: sourcify
    - name: POSTGRES_PORT
      value: "5432"
    - name: POSTGRES_HOST
      value: postgresql

filesystemImport:
  enabled: true
  image:
    registry: docker.io
    repository: node
    tag: 16.17.0-bullseye
    pullPolicy: IfNotPresent
  env:
    - name: POSTGRES_USER
      value: sourcify
    - name: POSTGRES_PASSWORD
      value: "<path:/secrets/clusters/sourcify/shared/shared.enc.yaml#db_postgres_sourcify_password>"
    - name: POSTGRES_DB
      value: sourcify
    - name: POSTGRES_PORT
      value: "5432"
    - name: POSTGRES_HOST
      value: postgresql
